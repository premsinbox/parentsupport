plugins {
    id "com.android.application"
    id "com.google.gms.google-services"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

dependencies {
    implementation(platform("com.google.firebase:firebase-bom:33.6.0"))
    implementation("com.google.firebase:firebase-analytics")
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "in.realtech.parentsupport"
    compileSdk = 34
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    defaultConfig {
        applicationId = "in.realtech.parentsupport"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            // Enable ProGuard (R8) for code and resource shrinking
            //minifyEnabled true   // Enables code shrinking
            //shrinkResources true  // Removes unused resources
            signingConfig signingConfigs.release

            // Use default ProGuard rules and include custom ones
            //proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // Enable resource splitting based on ABI (architecture)
//    splits {
//        abi {
//            enable truet
//            reset()
//            include 'armeabi-v7a', 'x86', 'arm64-v8a', 'x86_64'  // Include only required ABIs
//            universalApk false  // Do not generate a universal APK
//        }
//    }

    // Enable dynamic delivery and splits
//    bundle {
//        abi {
//            enableSplit = true
//        }
//    }
}

flutter {
    source = "../.."
}
